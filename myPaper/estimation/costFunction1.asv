function J = costFunction1(k)
global measured
%Simulation
t = measured.t;
q = measured.x(1:4,:);
w = measured.x(5:7,:);
x = zeros(3,length(t)+1);
%x(:,1) = w(:,1);
x(:,1) = [0,0,0]';

for i = 1:length(t)
    %%Get step size
    if i == 1
        dt = t(i+1);
    else
        dt=t(i)-t(i-1);
    end
    % %%%Gravity center offset (body Frame)
    cg = k(7:9)';
    %%%Satellite mass
    m_sat = 1.244;
    %%%%Unmodeled friction coef (Inetial Frame)
    aplha = k(10);
    A = k(11:13);
    
    %%%AirBearing undesired Torque
    t_air_inertial = A'; %%% Inertial frame
    t_air_body = quatRotation(quatconj(q'),t_air_inertial);

    %%%AirBearing friction Torque
    %coef= [0,0,aplha];  %%%Inertial Frame
    %diag(quatRotation(quatconj(q'),coef))
    t_air_friction = -aplha*x(:,i);
    
    %%%Gravity Gradient Torque
    t_gg_body = T_disturbances(m_sat,cg,q);  %%Body Frame
                             
    %%%Total torque 
    Td_body = t_gg_body+t_air_friction+t_air_body;

    %Start RK 4 de cuarto orden
    g1=dt*testBedv1(t(i), Td_body, x(:,i), k);
    g2=dt*testBedv1(t(i), Td_body, x(:,i)+0.5.*g1, k);
    g3=dt*testBedv1(t(i), Td_body, x(:,i)+0.5.*g2, k);
    g4=dt*testBedv1(t(i), Td_body, x(:,i)+0.5.*g3, k);
    x(:,i+1)=x(:,i)+(1/6).*(g1+2.*g2+2.*g3+g4);
    if(isnan(x(:,i+1)))
        break;
    end
    % if sum((abs(x(:,i+1))>0.05))~=0
    %     break;
    % end
end

%%%Compute Residual Errors
disp(['J: ',sum(vecnorm(w-x(:,1:end-1),2,1).^2));
disp('A: ',length(t)*norm(A));
J = sum(vecnorm(w-x(:,1:end-1),2,1).^2)+length(t)*norm(A);
if isnan(J) 
    J = Inf;
end
end

function [ Tgg ] = T_disturbances(Ms,R_cm,q)
    g_inertial     = [0,0,-9.81]';
    g_body         = quatRotation(quatconj(q'),g_inertial);
    Tgg = cross(R_cm,Ms*g_body);
end

function rotX = quatRotation(q,x)
    qx = [0,    x(1), x(2), x(3)];
    q  = [q(1), q(2), q(3), q(4)];
    qrotX = quatmultiply(quatmultiply(q, qx), quatconj(q));
    rotX = [qrotX(2);qrotX(3);qrotX(4)];
end